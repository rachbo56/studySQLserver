DBMS - Microsoft SQL Server Management Studio 18
Book - This is the SQL Server by Hanbit Media
        Chapter 3. SQL Server 2016 전체 운영 실습

<데이터베이스 구축 절차> <the processing of database structure>

데이터베이스 생성 (Create a databse)
테이블 생성 (Create tables)
데이터 입력 (Insert a data into the table)
데이터 조회/활용 (Retrieving and utilizing a data)


-> 테이블 외의 데이터베이스 개체의 활용 -> 데이터 백업 및 관리

-> 응용프로그램에서 구축된 데이터 활용 (웹 서비스/애플리케이션)


char: 영문글자만 (only using for English)
nchar: 한글이 들어갈 때 (using foreign language)



1. Ceate tables - memberTBL / productTBL

dbo. -> schema name


CREATE TABLE memberTBL
            (memberID nvarchar(50) PRIMARY KEY NOT NULL
            , memberName nvarchar(50) NOT NULL
            , memberAddress nvarchar(50));
            
CREATE TABLE productTBL
            (productName nvarchar(%0) NOT NULL
            , cost money NOT NULL
            , makeDate date 
            , company nvarchar(50)
            , amount int NOT NULL);
            
            
2. Insert data into tables

3. SELECT statement


USE shopDB
GO

SELECT *
FROM memberTBL;

SELECT memberName, memberAddress
FROM memberTBL;

SELECT *
FROM memberTBL
WHERE memberName = 'Jeeuni';



4. Utilization of database objects
INDEX / STORED PROCEDURES / FUNCTIONS / TRIGGER / CURSOR

4-1) INDEX : 대부분의 책의 제일 뒤에 붙어있는 '찾아보기(또는 색인)'과 같은 개념.
             책 뒤의 '찾아보기'를 보고 색인에 나와 있는 페이지로 찾아가는 것이 훨씬 빠른 것과 같은 개념.
             데이터의 결과에 영향을 주지는 않음.
             실무에서 사용되는 많게는 수천만 ~ 수억 건의 데이터에서 인덱스가 없이 전체 데이터를 찾아본다는 것은 
             SQL server 입장에서 시간이 오래걸리는 일이 됨.

SELECT Name, productNumber, ListPrice, Size INTO indexTBL
FROM AdventureWorks2019.Production.Product;
GO
SELECT *
FROM indexTBL;

-> 실습의 테이블은 레코드가 몇 없기 때문에, adventureworks에서 504개의 열을 가져옴.

SELECT * FROM indexTBL
WHERE Name = 'Minipump';

-> Include Actual Execution Plan을 클릭하고 select문을 실행하니, 테이블을 스캔한 후 Minipump라는
   name을 찾음
   


CREATE INDEX idx_indexTBL_Name ON indexTBL(Name);

-> CREATE INDEX for indexTBL



SELECT * FROM indexTBL
WHERE Name = 'Minipump';

-> It has been changed to execute this SELECT statment after creating index.
  Under the Execution plan tap, there are 'Nested Loops(Inner Join)' 'Index Seek' 'RID Lookup'
  Data가 많을 수록 속도의 차이가 체감 됨.
  

4-2) VIEW : 가상의 테이블 (virtual table) '뷰 테이블'이라고도 부르지만 정확한 말은 아님.
            뷰는 실제 행 데이터를 가지고 있지 않다.
            실체가 없고, 진짜 테이블에 Link된 개념. 
            회원테이블에서 아이디와 주소만 뽑아서 뷰를 생성하면, 새로운 알바생은 이 뷰에만 접근이 가능.
            Good for the security.
            

CREATE VIEW uv_memberTBL
AS
	SELECT memberName
		, memberAddress
	FROM memberTBL;
  
  
SELECT *
FROM uv_memberTBL;




4-3) STORED PROCEDURE : SQL Server에서 제공해주는 프로그래밍 기능.
                        SQL문을 하나로 묶어서 편리하게 사용하는 기능.
                        실무에서는 SQL문 (주로 SELECT)을 매번 하나하나 수행하기보다는, 저장 프로시저로
                        만들어 놓은 후에 저장 프로시저를 호출하는 방식을 많이 사용함.


CREATE PROCEDURE myProc
AS
	SELECT *
	FROM memberTBL
	WHERE memberName = 'DangDang';

	SELECT *
	FROM productTBL
	WHERE productName = 'Regregirator';
GO


-> 나중에는 if구절, programming문을 사용할 수 있음.




4-4) TRIGGER : 테이블에 부착되어서, 테이블에 INSERT, UPDATE, DELETE 작업이 발생되면 실행되는 코드.
                EX) 테이블에서 행을 삭제하면, 그 삭제된 데이터는 나중에 확인 할 수가 없다.
                    학생이 자퇴를 하면 행을 삭제하면 되는데, 나중에 학생이 "전 자퇴를 했지만 학생이였다는 것을
                    증명해주세요." 하고 요구를 하면, 데이터베이스에 존재하지 않기 때문에 알 수 있는 방법이 없음.
                    그래서 '자퇴생테이블' '졸업생테이블' 등을 만들어, 행 데이터를 삭제하기 전에, 내용을 다른 곳에
                    먼저 복사해 놓으면 됨.
                    회원 테이블에 삭제작업이 일어날 경우, 삭제되기 전에 미리 다른 곳에 삭제될 데이터를 '자동으로'
                    저장해주는 기능.
                    사용자는 더 이상 행 데이터를 삭제하기 전에 다른 곳에 저장해야 하는 업무적 부담에서 벗어나게
                    될 뿐 아니라, 삭제된 모든 사용자는 완벽하게 별도의 곳에 저장되어 있을 것.
                    



